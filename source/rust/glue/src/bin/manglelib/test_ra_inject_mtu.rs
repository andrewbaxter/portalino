use {
    crate::manglelib::modify,
    std::net::Ipv6Addr,
};

const PAYLOAD_RA1: &[u8] = &[
    // ipv6
    0x6b,
    0x80,
    0x00,
    0x00,
    0x00,
    0x38,
    0x3a,
    0xff,
    0xfe,
    0x80,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x40,
    0xff,
    0xfe,
    0x12,
    0x20,
    0x0a,
    0xff,
    0x02,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    // icmpv6 ra
    0x86,
    0x00,
    0xb2,
    0x55,
    0x40,
    0x40,
    0x07,
    0x08,
    0x00,
    0x04,
    0x93,
    0xe0,
    0x00,
    0x00,
    0x27,
    0x10,
    0x01,
    0x01,
    0x02,
    0x00,
    0x40,
    0x12,
    0x20,
    0x0a,
    0x03,
    0x04,
    0x40,
    0xc0,
    0x00,
    0x27,
    0x8d,
    0x00,
    0x00,
    0x09,
    0x3a,
    0x80,
    0x00,
    0x00,
    0x00,
    0x00,
    0x24,
    0x04,
    0x7a,
    0x82,
    0x3c,
    0x40,
    0x1f,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
];

#[test]
fn test() {
    let got = modify(PAYLOAD_RA1, Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), Some(13)).unwrap();
    let mut want = vec![
        // ipv6
        0x6b,
        0x80,
        0x00,
        0x00,
        0x00,
        0x40,
        0x3a,
        0xff,
        0xfe,
        0x80,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x40,
        0xff,
        0xfe,
        0x12,
        0x20,
        0x0a,
        0xff,
        0x02,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x01,
        // icmpv6 ra
        0x86,
        0x00,
        0xad,
        0x3f,
        0x40,
        0x40,
        0x07,
        0x08,
        0x00,
        0x04,
        0x93,
        0xe0,
        0x00,
        0x00,
        0x27,
        0x10,
        0x01,
        0x01,
        0x02,
        0x00,
        0x40,
        0x12,
        0x20,
        0x0a,
        0x03,
        0x04,
        0x40,
        0xc0,
        0x00,
        0x27,
        0x8d,
        0x00,
        0x00,
        0x09,
        0x3a,
        0x80,
        0x00,
        0x00,
        0x00,
        0x00,
        0x24,
        0x04,
        0x7a,
        0x82,
        0x3c,
        0x40,
        0x1f,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        // mtu option start
        0x05,
        0x01,
        0x00,
        0x00,
        // mtu
        0,
        0,
        0,
        13
    ];
    if want.len() < got.len() {
        want.resize(got.len(), 0);
    }
    for (i, (got, want)) in Iterator::zip(got.iter(), want.iter()).enumerate() {
        let got = *got;
        let want = *want;
        println!("{:03}: {:x} {} {:x}", i, got, if got == want {
            "=="
        } else {
            "!="
        }, want);
    }
    assert_eq!(got, want);
}
