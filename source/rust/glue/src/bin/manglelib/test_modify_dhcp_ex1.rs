use {
    crate::manglelib::modify,
    std::net::Ipv6Addr,
};

const PAYLOAD_DHCP1: &[u8] = &[
    // IPv6
    0x6b,
    0x80,
    0x00,
    0x00,
    0x00,
    0x91,
    0x11,
    0x01,
    0xfe,
    0x80,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x40,
    0xff,
    0xfe,
    0x12,
    0x20,
    0x0a,
    0xfe,
    0x80,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xb2,
    0x6e,
    0xbf,
    0xff,
    0xfe,
    0x39,
    0xbf,
    0x7b,
    // UDP
    0x02,
    0x23,
    0x02,
    0x22,
    0x00,
    0x91,
    // Checksum (zeroed)
    0x00,
    0x00,
    // DHCPv6
    0x07,
    0x56,
    0x20,
    0xfd,
    0x00,
    0x02,
    0x00,
    0x0a,
    0x00,
    0x03,
    0x00,
    0x01,
    0x00,
    0x19,
    0xaa,
    0xbc,
    0xfa,
    0x1b,
    0x00,
    0x01,
    0x00,
    0x0e,
    0x00,
    0x02,
    0x00,
    0x00,
    0xab,
    0x11,
    0xfc,
    0x72,
    0xdb,
    0x43,
    0x6a,
    0xc5,
    0xca,
    0x1f,
    0x00,
    0x17,
    0x00,
    0x20,
    0x24,
    0x04,
    0x01,
    0xa8,
    0x7f,
    0x01,
    0x00,
    0x0b,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x03,
    0x24,
    0x04,
    0x01,
    0xa8,
    0x7f,
    0x01,
    0x00,
    0x0a,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x03,
    0x00,
    0x18,
    0x00,
    0x19,
    0x0a,
    0x66,
    0x6c,
    0x65,
    0x74,
    0x73,
    0x2d,
    0x65,
    0x61,
    0x73,
    0x74,
    0x02,
    0x6a,
    0x70,
    0x00,
    0x05,
    0x69,
    0x70,
    0x74,
    0x76,
    0x66,
    0x02,
    0x6a,
    0x70,
    0x00,
    0x00,
    0x1f,
    0x00,
    0x20,
    0x24,
    0x04,
    0x01,
    0xa8,
    0x11,
    0x02,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0b,
    0x24,
    0x04,
    0x01,
    0xa8,
    0x11,
    0x02,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0a,
];

#[test]
fn test_modify_dhcp_ex1() {
    let got = modify(PAYLOAD_DHCP1, Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), None).unwrap();
    let mut want = vec![
        // IPv6
        0x6b,
        0x80,
        0x00,
        0x00,
        // Length
        0x00,
        0x81,
        0x11,
        0x01,
        0xfe,
        0x80,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x40,
        0xff,
        0xfe,
        0x12,
        0x20,
        0x0a,
        0xfe,
        0x80,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0xb2,
        0x6e,
        0xbf,
        0xff,
        0xfe,
        0x39,
        0xbf,
        0x7b,
        // UDP
        0x02,
        0x23,
        0x02,
        0x22,
        // UDP length
        0x00,
        0x81,
        // Checksum
        0xe6,
        0xc9,
        // DHCPv6
        0x07,
        0x56,
        0x20,
        0xfd,
        0x00,
        0x02,
        0x00,
        0x0a,
        0x00,
        0x03,
        0x00,
        0x01,
        0x00,
        0x19,
        0xaa,
        0xbc,
        0xfa,
        0x1b,
        0x00,
        0x01,
        0x00,
        0x0e,
        0x00,
        0x02,
        0x00,
        0x00,
        0xab,
        0x11,
        0xfc,
        0x72,
        0xdb,
        0x43,
        0x6a,
        0xc5,
        0xca,
        0x1f,
        0x00,
        0x18,
        0x00,
        0x19,
        0x0a,
        0x66,
        0x6c,
        0x65,
        0x74,
        0x73,
        0x2d,
        0x65,
        0x61,
        0x73,
        0x74,
        0x02,
        0x6a,
        0x70,
        0x00,
        0x05,
        0x69,
        0x70,
        0x74,
        0x76,
        0x66,
        0x02,
        0x6a,
        0x70,
        0x00,
        0x00,
        0x1f,
        0x00,
        0x20,
        0x24,
        0x04,
        0x01,
        0xa8,
        0x11,
        0x02,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x0b,
        0x24,
        0x04,
        0x01,
        0xa8,
        0x11,
        0x02,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x0a,
        // DNS option
        0x00,
        0x17,
        // Length 16
        0,
        16,
        // IP
        0,
        1,
        0,
        2,
        0,
        3,
        0,
        4,
        0,
        5,
        0,
        6,
        0,
        7,
        0,
        8
    ];
    if want.len() < got.len() {
        want.resize(got.len(), 0);
    }
    for (i, (got, want)) in Iterator::zip(got.iter(), want.iter()).enumerate() {
        let got = *got;
        let want = *want;
        println!("{:03}: {:x} {} {:x}", i, got, if got == want {
            "=="
        } else {
            "!="
        }, want);
    }
    assert_eq!(got, want);
}
